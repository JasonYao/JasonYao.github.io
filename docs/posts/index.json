{"posts":[{"metadata":{"title":"Snippet: Configuring r2dbc + Flyway in Spring Boot to Postgres with enforced TLS/SSL","slug":"configuring-r2dbc-with-postgres-tls","created_on":"2023-01-12 03:15:21 -0500 -0500","published_on":"2023-01-12 03:15:21 -0500 -0500","modified_on":"2023-01-13 00:39:52 -0500 -0500","categories":["snippet","how-to"],"tags":["spring boot","java","r2dbc","postgres","tls","ssl","digital ocean"],"thumbnail":"images/locked-db.png","thumbnail_alt_text":"Also known as 'the result of 2+ hours of googling and tearing my hair out'","permalink":"https://www.jasonyao.com/posts/2023/01/12/snippet-configuring-r2dbc--flyway-in-spring-boot-to-postgres-with-enforced-tls/ssl/","summary":"A reference and a how-to guide on configuring r2dbc + Flyway to enforce TLS when talking to Postgres from a Spring Boot application.","reading_time":"5-minute read"},"data":{"content":"The title\u0026rsquo;s a bit of a mouthful, but I wanted to write this quick snippet as both a reminder to myself in case I ever need to do this again, or in case anybody else is in the same situation and wondering how to get the Spring Boot application.yaml config wired up to always verify the DB server\u0026rsquo;s TLS cert on startup when using r2dbc (Spring\u0026rsquo;s reactive programming framework), along with a database migrator like Flyway.\ntl;dr: A contrived example In this example, we\u0026rsquo;re pointing our spring boot application at a managed postgres instance running on Digital Ocean, and we\u0026rsquo;d like flyway migrations to run on startup automatically.\nRaw credentials in application.yml file (for illustrative purposes only) Don\u0026rsquo;t actually do this for production, use environment variables like in the second example, the below example here is to help illustrate the specific bare minimum required to get this all wired up properly.\nBasically, the salient portion of this (and probably the reason why you\u0026rsquo;re here) looks like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # In your src/main/resources/application.yml file spring: r2dbc: # E.g. r2dbc:pool:postgresql://managed-db-at.digital-ocean.com:25060/home url: r2dbc:pool:postgresql://DB_HOST_NAME:DB_PORT_NAME/DB_NAME username: \u0026#34;your-db-service-username-here\u0026#34; password: \u0026#34;your-db-service-password-here\u0026#34; # Please only use this to verify behavior and don\u0026#39;t actually check this in properties: schema: example_project_schema sslMode: VERIFY_FULL # This file should be added underneath your src/main/resources directory # somewhere. Here, we\u0026#39;ve chosen to put it in src/main/resources/db/certs # for clarity, but anywhere in that resources directory will do. sslRootCert: db/certs/digital-ocean-2023-q1-db-cert.crt flyway: # NOTE: For whatever reason, flyway does not support the proper jdbc connection # parameters that delineates between different parameters using the `\u0026amp;` character. # Instead, we need to use the `;` character to avoid startup runtime errors, which # was found after hours of trawling the web over at this atlassian thread of all things: # https://community.atlassian.com/t5/Jira-questions/SSL-connection-between-jira-service-management/qaq-p/1944433#M518820 # # So: # - This doesn\u0026#39;t work: # jdbc:postgresql://managed-db-at.digital-ocean.com:25060/home?ssl=true\u0026amp;sslmode=verify-full\u0026amp;sslrootcert=db/certs/digital-ocean-2023-q1-db-cert.crt # - But this does (note we just replaced the \u0026#39;\u0026amp;\u0026#39; characters with \u0026#39;;\u0026#39;): # jdbc:postgresql://managed-db-at.digital-ocean.com:25060/home?ssl=true;sslmode=verify-full;sslrootcert=db/certs/digital-ocean-2023-q1-db-cert.crt url: jdbc:postgresql://managed-db-at.digital-ocean.com:25060/home?ssl=true;sslmode=verify-full;sslrootcert=db/certs/digital-ocean-2023-q1-db-cert.crt user: ${spring.r2dbc.username} password: ${spring.r2dbc.password} schemas: ${spring.r2dbc.properties.schema} baseline-on-migrate: true The recommended way with environment variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # In your src/main/resources/application.yml file spring: r2dbc: url: ${DB_R2DBC_URL} # r2dbc:pool:postgresql://managed-db-at.digital-ocean.com:25060/home username: ${DB_SERVICE_USERNAME} # your-db-service-username-here password: ${DB_SERVICE_PASSWORD} # your-db-service-password-here properties: schema: example_project_schema sslMode: VERIFY_FULL sslRootCert: db/certs/digital-ocean-2023-q1-db-cert.crt # Or whatever you end up calling the cert name flyway: url: ${DB_FLYWAY_URL} # jdbc:postgresql://managed-db-at.digital-ocean.com:25060/home?ssl=true;sslmode=verify-full;sslrootcert=db/certs/digital-ocean-2023-q1-db-cert.crt user: ${spring.r2dbc.username} password: ${spring.r2dbc.password} schemas: ${spring.r2dbc.properties.schema} baseline-on-migrate: true Verifying the behavior If you\u0026rsquo;d like to verify that your application actually is connecting correctly, you can run the following commands to check:\nConnect to the remote DB using the CLI\n1 2 3 4 5 6 7 8 # Run from the src/main/resources directory psql -h managed-db-at.digital-ocean.com \\ --set=ssl=true \\ --set=sslmode=verify-full \\ --set=sslrootcert=db/certs/digital-ocean-2023-q1-db-cert.crt \\ -p 25060 \\ -U your-db-service-username-here \\ -d home Then run this command after giving the password and logging in:\n1 2 3 4 5 6 SELECT * FROM pg_stat_ssl; -- Or, if you want info on the client IP as well SELECT datname, usename, client_addr, ssl, version, cipher, bits FROM pg_stat_ssl JOIN pg_stat_activity ON pg_stat_ssl.pid = pg_stat_activity.pid; Which looks like the following after I triggered a DB read in my Spring Boot application:\nThat\u0026rsquo;s basically it! If you\u0026rsquo;re interested in more details of everything above, feel free to read down below.\nDiving a bit deeper with an example At the end of the day, what we\u0026rsquo;re trying to do at a very high level looks something akin to this:\nHowever, the devil\u0026rsquo;s in the details, and if you\u0026rsquo;re operating on sensitive data, you\u0026rsquo;re probably looking to have this data be at least encrypted in transit, if not also at rest. Because of that, we now have to complicate our service diagram a bit now.\nFor the purposes of this post, we\u0026rsquo;ll be talking about that last arrow (step 3 in the diagram) coming from our Spring Boot services to the Postgres database.\nSome definitions r2dbc: Spring\u0026rsquo;s newish (released ~2020 and has a lot of support) framework to work with reactive programming in the Java/Spring/Spring Boot ecosystem flyway: A mechanism to run database migrations automatically against the database, which essentially keeps track of the \u0026ldquo;versions\u0026rdquo; of your data object model as it changes and evolves over time. TLS or SSL: A mechanism for two parties to communicate in a secure manner while preventing eavesdropping or man in the middle attacks through the use of public key cryptography. TLS is actually the name of the protocols in use in modern-day web applications, while SSL references to old and insecure protocols that are out of date. While it\u0026rsquo;s more accurate to say that we\u0026rsquo;re securing communication between our Spring Boot application with TLS when talking to the database, you may see references to it as SSL, such as in the jdbc parameters above (e.g. with sslmode, ssl, and sslrootcert) postgres: An open source relational database that\u0026rsquo;s in widespread use, and is time-tested, performant, and generally a pleasure to work with Digital Ocean: A cloud offering that\u0026rsquo;s generally pretty developer-friendly, and has nice abstractions to help trade a bit of money for the sake of convenience. Supabase: Another cloud offering What we just did with the above snippet If you transplant the above snippet into a new Spring Boot application that utilizes r2dbc and flyway, it should Just Workâ„¢ to force the connection to always use TLS to communicate when making calls to the postgres database.\nHere, we\u0026rsquo;ll be presuming to use a managed cloud offering for postgres databases, with examples from both Digital Ocean and Supabase, however the above steps could be pretty generalizable to any other public cloud offering for managed postgres databases.\nGetting the .crt file from Digital Ocean Getting the .crt file from Supabase Putting this all together Finally, you\u0026rsquo;ll need to make the downloaded .crt public key(s) referencable by both Spring Boot r2dbc configuration parameters, and the flyway jdbc connection string. In order to do that, just move those .crt files to the src/main/resources directory somewhere, and you\u0026rsquo;re now good to go!\n"},"git_information":{"short_hash":"5206c46","commit_timestamp":"2023-01-13 00:39:52 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"5206c4634f1ba1ccbffe18852748c4f5420f6cd6","subject":"Typo fix: Updated not working example jdbc url","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/5206c4634f1ba1ccbffe18852748c4f5420f6cd6"}},{"metadata":{"title":"2021 Tech Stack Migration Guide (Domains)","slug":"2021-tech-stack-migration-guide-domains","created_on":"2021-09-28 18:06:15 -0400 -0400","published_on":"2021-09-28 18:06:15 -0400 -0400","modified_on":"2021-11-30 02:55:57 -0500 -0500","categories":["guides"],"tags":["domains","migration","cloudflare","namecheap","domain registrar"],"thumbnail":"images/looking-back-meme.jpg","thumbnail_alt_text":"Doing a bunch of work 'for the principle of the matter' should be on my tombstone","permalink":"https://www.jasonyao.com/posts/2021/09/28/2021-tech-stack-migration-guide-domains/","summary":"The following is a more in-depth guide on why and how I swapped out the domain registrar portion of my site\u0026rsquo;s tech stack over time.","reading_time":"8-minute read"},"data":{"content":"The following is a more in-depth guide on why and how I swapped out the domain registrar portion of my site\u0026rsquo;s tech stack over time.\nWhat\u0026rsquo;s a Domain Name Registrar and how does it relate to my domain? So, what is a Domain Name Registrar in the first place? In essence, it\u0026rsquo;s just a given domain name provider that end users like you or I can pay a fee to in order for them to create a domain name that we can use on the internet.\nIf you\u0026rsquo;d like to read more into the fascinating world of domain name management in which I spent the past 3.5 years a part of, check out my domain system walkthrough series, where we talk about the different actors in this system, and even build a dummy DNR ourselves (to get it actually working you\u0026rsquo;d need to pay ICANN and go through accreditation and sign lots of contracts, which is a bit much for a blog post series).\nWhy you should transfer your domain to Cloudflare Some history: where we were in 2017 When I first looked around the domain registrar space back a couple years ago, I found a lot of shady sites, anti-consumer pricing mechanisms (I\u0026rsquo;m looking at you GoDaddy), and just general wonkiness when trying to use their services to, for example, point over to Digital Ocean, a cheap VPS host that I used at the time.\nNamecheap was like a breath of fresh air though- there wasn\u0026rsquo;t any pricing gimmicks, pointing nameservers at somewhere else didn\u0026rsquo;t take 2-3 working days, and their support team was top notch if anything ever did come up. Plus, they were cheaper than the other registrars that were at least semi reputable.\nIn total, it costs $9.06 USD per year for a .com domain at Namecheap. For reference, their margin per domain per year is about $1.03 USD, whereas other domain registrars were egging each other on to breaking the $10.00 USD per year mark.\nWhere we are now in 2021 Even though I\u0026rsquo;ve worked on the Domains team at Squarespace for over 3.5 years, and built from the very first lines of code a domain name registrar from scratch during my time there, I still have a lot of love in my heart for Namecheap as a registrar, since they really did provide a ton of value to me when I was a student, for more than a fair price.\nHowever, in 2018 a nuclear bomb was dropped on the whole domain industry when Cloudflare announced that they were launching their own domain registrar.\nThe reason why the launch was such a big deal? Cloudflare was going to charge no additional fees on top of the wholesale price of a given domain.\nLet me repeat that.\nCloudflare was not charging any money for their domain registrar services Cue the sound of a million business execs calling up their lawyers to see if there was any way they could stop this, as they realize that Cloudflare was coming to eat their lunch. This was Cloudflare firing the first shot to begin the war against the crazy pricing in the Domain Name Registrar ecosystem, and to add additional downward pressure on prices for end consumers like you or me.\nNow, before we continue, it\u0026rsquo;s important that we keep the following in mind:\nDomain names are commodities, and domain registrars are fungible This fact may get lost due to some companies (cough cough) attempting to imply a higher \u0026ldquo;quality of service\u0026rdquo; or \u0026ldquo;premium\u0026rdquo;-ness to their domain offerings from their brand, but as far as you-as-a-customer are concerned, just because some providers charge a lot more, it doesn\u0026rsquo;t mean they\u0026rsquo;re actually adding anything of value for you.\nAt the end of the day, these offerings are all the same, and you should bargain hunt for the lowest cost among reputable domain name registrars.\nHere\u0026rsquo;s what the breakdown looks like in table form when trying to register the domain HelloThereGeneralKenobi.com:\nRegistrar Price per .com domain per annum How I feel Namecheap $10.87 USD Cloudflare $8.03 USD Wix $12.95 USD GoDaddy $18.99 USD Squarespace $20.00 USD For those of you that know me, you\u0026rsquo;ll know one of my favorite phrases is\nBut it\u0026#39;s the principle of the matter And so it was. That $2.84 USD per year in cost saving now meant something to me, as stupid as it is to write it out. At the end of the day, domains are essentially commodities past a certain level of expected service, which meant that it didn\u0026rsquo;t matter too much at the end of the day who was the domain registrar for us, as long as they were reasonably reputable, and had the lowest prices.\nFor the sake of the principle of the matter, I jumped ship from Namecheap for my .com domains and migrated them all over to Cloudflare, pretty much on the day that Cloudflare\u0026rsquo;s registrar became GA. It helped that I was already using Cloudflare anyways for their CDN and DNS offerings, so I knew that they had a high bar for quality and wouldn\u0026rsquo;t be likely to have any issues.\nThe only fear I have is that I haven\u0026rsquo;t ever had to call into Cloudflare\u0026rsquo;s customer support before, so I have no idea if that experience would be a positive one like at Namecheap, or if I\u0026rsquo;d be bounced around in an AI chatbot for 30 minutes before getting to talk to an overworked human.\nThat uncertainty is definitely now a known unknown, all for the known known benefit of having $1.03 USD more each year to spend on dubiously clean ethnic food. That\u0026rsquo;s like 1/4 of a cha-siu roasted pork meal at Wah Fung, or 1/5 of a halal meal if you swing that way.\nHow to transfer your domain from Namecheap to Cloudflare Head on over to your Cloudflare dashboard. you\u0026rsquo;ll notice a handy-dandy button for Cloudflare\u0026rsquo;s Registrar over on the right-hand side We\u0026rsquo;re transferring our domain from Namecheap, so select the Transfer button Since we already use Cloudflare as a CDN for this website, we can simply select the domain(s) that we\u0026rsquo;d like to transfer in, and then hit the Confirm Domains button Now you\u0026rsquo;ll see a transfer info page- open up a new tab when you get here (don\u0026rsquo;t close this current Cloudflare tab!) In your new tab, head on over to Namecheap\u0026rsquo;s domain dashboard. If your WHOIS privacy is turned on, turn it off (I believe this step is required) Click over to the Sharing \u0026amp; Transfer tab At the bottom of this tab, you\u0026rsquo;ll see this Transfer Out section. Go ahead and click the Unlock button to unlock your domain for transfer Then click Auth Code, which will bring you to this menu where Namecheap asks you for an optional reason for why you\u0026rsquo;re leaving. Feel free to let them know, or tell them nothing, and then click the Send Code button Head on over to your email to grab your transfer code, and copy it Then head back over to your original Cloudflare tab, paste your trasnfer code in, and then hit Confirm \u0026amp; Proceed Fill out your contact information, and then click Confirm and Finalize Transfer You\u0026rsquo;re almost there! Cloudflare will send a message in the background to Namecheap via the Domain Name Registry in the background, but it may take Namecheap a couple minutes to receive the message, since it depends on their EPP message polling rate After about ~5-15 minutes, you\u0026rsquo;ll receive an email from Namecheap saying that the transfer was initiated, and that it would take up to 5 days. THIS IS A SHADY CUSTOMER RETENTION TACTIC. To avoid waiting 5 days to transfer your domain, and just transfer now, click the link in the box below (yes, the message description is deliberately misleading- the page it brings you to will enable you to both cancel the request OR immediately approve the transfer, without waiting the full 5 days) When you click that link, you get brought over to this selection page. Click the Approve button in order to finally confirm your domain transfer to Cloudflare, which should occur almost instantaneously (unless the underlying domain name registry is having issues). This last page means that you\u0026rsquo;re good to go, and your domain should now be transferred to Cloudflare, where it\u0026rsquo;ll renew without any additional costs going forward! So, what\u0026rsquo;s the final verdict on migrating over to Cloudflare Registrar? It\u0026rsquo;s been 100% worth it, though do keep in mind that sometimes it\u0026rsquo;s cheaper to keep certain domains at other domain name registrars, since that registrar may perpetually keep a TLD\u0026rsquo;s price lower than the registry-cost, in order to act as a continual loss leader to draw in customers for their other TLDs\nE.g. it\u0026rsquo;s cheaper for me to keep .io domains at Namecheap than at Cloudflare, since even though Cloudflare is at the wholesale price, Namecheap just has a constant discount for .io domains by a few bucks that puts it down below the wholesale cost.\nI won\u0026rsquo;t lie, I got more than a bit of satisfaction from having a large company like Cloudflare call it like it is, instead of pretending like most of the domain registrar ecosystem. This quote in particular from their blog post announcing the launch of Cloudflare Registrar sparked so much joy and vindication when I first read it:\nThe thing is, registering a domain is a commodity. There\u0026rsquo;s no meaningful difference between any of the existing mass market registrars. Each top level domain registry (TLDs like .com .org .info .io, etc) sets a wholesale price for registering a domain under them. These prices are known and remain relatively consistent over time. All the registrar does is record you as the owner of a particular domain. That just involves sending some commands to an API. In other words, domain registrars are charging you for being a middle-man and delivering essentially no value to justify their markup. The more we looked at it, the more crazy the whole market looked to us.\nNo, Cloudflare, you\u0026rsquo;re not crazy, the world is- so thank you for launching something to bring some sanity back to the world.\n"},"git_information":{"short_hash":"008df4d","commit_timestamp":"2021-11-30 02:55:57 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"008df4dab6b58959c47cd8643a357c6feec2c9f7","subject":"jyao/relaunch announcement (#36)","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/008df4dab6b58959c47cd8643a357c6feec2c9f7"}},{"metadata":{"title":"Tech Stack Retro (2021)","slug":"tech-stack-retro-2021","created_on":"2021-03-31 02:18:20 +0800 +0800","published_on":"2021-03-31 02:18:20 +0800 +0800","modified_on":"2021-11-30 02:55:57 -0500 -0500","categories":["updates"],"tags":["meta","personal site"],"thumbnail":"images/annual-site-bill.png","thumbnail_alt_text":"That's like 2 small orders of Wah Fung. Yes, Cha-siu roasted port is officially a unit of measurement. It's a measurement of happiness.","permalink":"https://www.jasonyao.com/posts/2021/03/31/tech-stack-retro-2021/","summary":"Also, hello (again)! It\u0026rsquo;s been almost 4 years since I last touched anything to do with my personal site, with the good old excuse of laziness, work, other stuff to do, no stuff to do, and trying to figure out how to be a (barely) functional adult in this world.","reading_time":"6-minute read"},"data":{"content":"Also, hello (again)! It\u0026rsquo;s been almost 4 years since I last touched anything to do with my personal site, with the good old excuse of laziness, work, other stuff to do, no stuff to do, and trying to figure out how to be a (barely) functional adult in this world.\nSince that time, tech has marched on, and I thought I might do a bit of a retrospective on how my chosen tech stack\u0026rsquo;s held up in terms of achieving my original goal of creating an online presence in the most penny-pinching cost-efficient manner.\nGoal recap (optimizing for laziness and my wallet) As a reminder, the original goal of mine 4 years ago was to hustle leverage as many existing free services as humanly possible due to me being a lazy cheapskate efficient and frugal uni student.\nMaintenance burden should be 0- if I do absolutely nothing to maintain this, everything should continue to Just Workâ„¢ Everything must be free, or as close to 0 as humanly possible Optimizations and extensions should be simple, easy, and intuitive Constraints I do want the ability to have the site versioned, so if I ever need to, I can revert back to an older version of a site easily I do want my content to be automatically optimized, so it can be shared correctly on Facebook and show up as a rich snippet on Google I do want solving for scale to be trivial, ideally in a way where it\u0026rsquo;s simple to add in the ability to deal with theoretical spikes in traffic I do want custom domain emails, so I can send and receive emails from foobar@JasonYao.com in Gmail without having to think about it As everybody knows, your solution to a problem is informed just as equally by what you\u0026rsquo;re not solving for, as much as it is by the problem itself.\nI don\u0026rsquo;t need full CMS capabilities, or the ability to have dynamic backend functionality for my online presence (though if I do in the future I\u0026rsquo;d like for it to be easy to add in) I don\u0026rsquo;t need commerce or shopping capabilities I don\u0026rsquo;t want to have to muck about and style my site from scratch- using and customizing a pre-built theme is fine, but CSS without guide rails hurts my very smooth brain Tech Stack Architecture Here\u0026rsquo;s what the network request looks like from a user Your standard CDN-fronted, static site solution The thing to note here is that there\u0026rsquo;s nothing backing the webhost here- there\u0026rsquo;s no database or microservice backing it up, since the entire website is statically created at build time, and simply uses Github Pages to serve its content.\nTo actually update the content, the developer user flow used to look like this (note that everything in this diagram is automated): (Ab)using Github by using source control for full site deployments (and rollbacks if necessary) Now in 2021, it\u0026rsquo;s been consolidated a bit but the general approach is still the same Basically the same as in 2017 just with different service providers. The fact that all of this is free still kinda blows my mind a bit, and the fact that it\u0026#39;s all automated feels great Tech Stack Comparison Service Service Provider (2017) Service Provider (2021) Cost Per Annum (2017) Cost Per Annum (2021) Custom domain Namecheap Cloudflare Registrar $10.87 USD $8.03 USD Custom domain email Mailgun - $0.00 USD $0.00 USD Website hosting \u0026amp; Continuous Deployment (CD) Github Pages - $0.00 USD $0.00 USD Continuous Integration (CI) TravisCI Github Actions $0.00 USD $0.00 USD Static site generator Jekyll Hugo $0.00 USD $0.00 USD Content Delivery Network (CDN) Cloudflare - $0.00 USD $0.00 USD Tech Stack Total Cost Per Annum 2017 Tech Stack $10.87 USD 2021 Tech Stack $8.03 USD In both the 2017 and the new 2021 system, the general format is still the same, wherein we generate a static site and use GitHub Pages for deployment In both systems, we gain a lot of benefits from this architecture: There\u0026rsquo;s no server or services that I need to manage Scaling horizontally is as simple as fronting the static content with 1 or more CDN or any other edge server Things are fast since everything is pre-computed, and the only bottleneck to painting content for users is literally just the network. Development cycle for new content is trivial, since it\u0026rsquo;s just \u0026ldquo;fire and forget\u0026rdquo; (or in this case \u0026ldquo;push and forget\u0026rdquo;). Therefore, in our new 2021 system, we still retain all of our benefits from the previous 2017 system, with three major benefits: Modernizing the tech stack: By using Hugo to template our site, and gain a huge speed boost in both developer productivity and in site generation times (previous times were around 30s, I\u0026rsquo;m now generating this site in ~150ms) Lowering ongoing costs: By using Cloudflare Registrar, we can avoid having to pay any additional costs every year to the domain name registrar, since Cloudflare has gotten rid of adding in a margin for their DNR system. Stuff like this is why I love Cloudflare Keeping to our principles: I used to love TravisCI, before they were acquired by a private equity firm. Ever since they drove out all of their best talent, I knew the writing was on the wall for them. With their recent large-scale security breach in which Travis has followed none of the proper disclosures for, I took this tech stack overhaul as an opportunity to migrate from TravisCI over to GitHub Actions, which has the additional benefit of also modernizing the tech stack a bit. At the end of the day, thanks to our tech stack selection and architecture, we have a publicly-accessible website that is functionally free, except for the annual domain cost.\nThe domain itself is pretty much my only ongoing cost... Now if only I can find a reputable place to get a free domain, and then _really_ make this blog post clickbait Going more in depth on swapping out tech stacks If anybody reading this would like more details on what the process of migrating my tech stack over looked like, I go into more depth over in my 2021 tech stack migration guide.\nConclusion With this setup, I\u0026rsquo;m now primed for being able to write a lot more frequently than before. Or fall into the trap of never writing a blog post again until I feel guilty enough 4 years down the line, only time will tell. "},"git_information":{"short_hash":"008df4d","commit_timestamp":"2021-11-30 02:55:57 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"008df4dab6b58959c47cd8643a357c6feec2c9f7","subject":"jyao/relaunch announcement (#36)","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/008df4dab6b58959c47cd8643a357c6feec2c9f7"}},{"metadata":{"title":"How I got customized personal emails, a domain, and a website for 11 dollars a year","slug":"how-i-got-a-customized-online-presence-for-11-dollars-a-year","created_on":"2017-05-23 07:22:18 +0000 UTC","published_on":"2017-05-23 07:22:18 +0000 UTC","modified_on":"2023-01-14 05:18:13 -0500 -0500","categories":["guides"],"tags":["meta","personal site"],"thumbnail":"images/namecheap/namecheap-domain-2016-price.png","thumbnail_alt_text":"Having an online presence for the cost of 2 halal meals a year just makes me happy","permalink":"https://www.jasonyao.com/posts/2017/05/23/how-i-got-customized-personal-emails-a-domain-and-a-website-for-11-dollars-a-year/","summary":"The following post contains a bunch of specific details on how I managed to get free custom domain emails and a website on the internet with my only ongoing cost being the domain name.","reading_time":"7-minute read"},"data":{"content":"The following post contains a bunch of specific details on how I managed to get free custom domain emails and a website on the internet with my only ongoing cost being the domain name.\nOur goals Maintenance burden should be 0- if I do absolutely nothing to maintain this, everything should continue to Just Workâ„¢ Everything must be free, or as close to 0 as humanly possible Optimizations and extensions should be simple, easy, and intuitive Constraints I do want the ability to have the site versioned, so if I ever need to, I can revert back to an older version of a site easily I do want my content to be automatically optimized, so it can be shared correctly on Facebook and show up as a rich snippet on Google I do want solving for scale to be trivial, ideally in a way where it\u0026rsquo;s simple to add in the ability to deal with theoretical spikes in traffic I do want custom domain emails, so I can send and receive emails from foobar@JasonYao.com in Gmail without having to think about it As everybody knows, your solution to a problem is informed just as equally by what you\u0026rsquo;re not solving for, as much as it is the problem itself.\nI don\u0026rsquo;t need full CMS capabilities, or the ability to have dynamic backend functionality for my online presence (though if I do in the future I\u0026rsquo;d like for it to be easy to add in) I don\u0026rsquo;t need commerce or shopping capabilities I don\u0026rsquo;t want to have to muck about and style my site from the ground up- using and customizing a pre-built theme is a hard requirement, but CSS hurts my very smooth brain The chosen tech stack Service Company Cost Per Annum Custom domain Namecheap $10.86 USD Custom domain email Mailgun $0.00 USD Website hosting \u0026amp; Continuous Deployment (CD) Github Pages $0.00 USD Continuous Integration (CI) TravisCI $0.00 USD Static site generator Jekyll $0.00 USD Content Delivery Network (CDN) Cloudflare $0.00 USD Total cost per year: $10.86 USD\nCurrent Time Spent on Maintenance: 0 hours\nHere\u0026rsquo;s what the network request looks like from a user Your standard CDN-fronted, static site solution The thing to note here is that there\u0026rsquo;s nothing backing the webhost here- there\u0026rsquo;s no database or microservice backing it up, since the entire website is statically created at build time, and simply uses Github Pages to serve its content.\nTo actually update the content, the developer user flow looks like this (note that everything in this diagram is automated after pushing to Github): (Ab)using Github by using source control for full site deployments (and rollbacks if necessary) This setup comes with some nice benefits:\nThere\u0026rsquo;s no server or services that I need to manage Scaling horizontally is as simple as fronting the static content with 1 or more CDN or any other edge server Things are fast since everything is pre-computed, and the only bottleneck to painting content for users is literally just the network. Development cycle for new content is trivial, since it\u0026rsquo;s just \u0026ldquo;fire and forget\u0026rdquo; (or in this case \u0026ldquo;push and forget\u0026rdquo;). Setup guide Getting a domain This is as simple as just going to Namecheap, searching for a domain, and then hitting the buy button.\nNOTE: Since the domain cost is the only ongoing cost with this build, you may be tempted to take up namecheap\u0026rsquo;s great deal with paying $1.00 USD the first year for a .xyz TLD.\nDO NOT FALL FOR THIS.\nRemember kids, the first hit is free- or in this case 1 dollar, but it\u0026#39;s the follow-up where they get you. The annual renew rate for these cheap .xyz TLDs is actually around $13 USD, meaning that you\u0026rsquo;d be paying over a 40% premium for a more sketchy-looking domain name compared to a regular old .com or .net TLD.\nI\u0026rsquo;d suggest just getting a regular .com/.net, or one of the cheaper annual cost ccTLDs, depending on which country you\u0026rsquo;re from.\nGetting free custom email sending/receiving through Gmail This one takes a little bit of setup. Let\u0026rsquo;s dig in.\n2021 April 1st editor\u0026rsquo;s note: The process laid out here is no longer valid for new users due to changes to Mailgun\u0026rsquo;s pricing of their free tier. Consider other programmatic mail providers that have a free tier instead\nDanny Guo wrote up a great walkthough on this process back in 2018, but the gist is:\nUse any programmatic email provider with a free tier that enables the creation of SMTP users Enable email receiving by adding in an email route to forward emails to your personal Gmail account Enable email sending by creating an SMTP user foobar@yourdomain.com, and then give Gmail the username \u0026amp; password of your SMTP user so they can send emails that appear with an origin email of foobar@yourdomain.com Mailgun\u0026rsquo;s free tier in particular is really nice, since I get access to 10,000 emails a month for free- do note that this 10k number includes both sending and receiving!\nGenerally I\u0026rsquo;ll be in the ~200 emails sent \u0026amp; received every month, so I\u0026rsquo;m well within the established limits here.\nSetting up website hosting This is the meat of our new website that we\u0026rsquo;re making\nOur overarching steps here will be:\nCreate a new repo Setup our static site generator Setup our CI/CD pipeline Configure Github Pages to deploy our generated static website Creating a new repo This should be straight-forward, with the only caveat being that you\u0026rsquo;ll need to be particular about your repo naming convention, and make your name \u0026lt;USER_NAME_HERE\u0026gt;.github.io as the repo name Setting up our static site generator We use Jekyll here as our static site generator, and use a modified Jekyll theme as our starting off point for our website Setting up our CI/CD pipeline Our CI/CD pipeline is going to be a bit special. We\u0026rsquo;re going to:\nSet our mainline branch to be source, and branch off/merge in content into this branch Create a new branch off of source called publish, and use this branch as the branch where we have our generated site created in and kept in source code Create a travis.yml file that will \u0026ldquo;deploy\u0026rdquo; our code when it detects a push to the source branch, which will build the site and move all built files into the docs/ directory on the publish branch, before pushing everything up Configuring GitHub Pages to automatically deploy our site Let\u0026rsquo;s go ahead and in our created repo hit the Settings tab Once here, let\u0026rsquo;s enable GitHub Pages, and point it to our deployment branch that we\u0026rsquo;re committing to And we\u0026rsquo;re done! Now, any time anything new is committed to the publish branch in the docs directory, GitHub Pages will take those files and publish it onto the internet for us! Enabling horizontal scaling through CDNs We\u0026rsquo;re going to use Cloudflare as our chosen CDN because I love their ease-of-use and how consumer-friendly they are as a company.\nCreate a Cloudflare account if you don\u0026rsquo;t have one already, which should pop you into the dashboard over at https://dash.cloudflare.com Add in the name of your site that you want to have served by Cloudflare Select a billing plan for this domain- the free tier is perfectly fine for our needs, so we shouldn\u0026rsquo;t need any of the paid features here Cloudflare has some nice automatic DNS configuration backend work, which should take the heavy-lifting from copy/pasting DNS settings from Namecheap You should now be able to review and confirm your DNS settings- generally you wouldn\u0026rsquo;t need to change anything since those settings are the same as what you have currently Finally, we\u0026rsquo;ll need to confirm our control of the domain name by pointing its nameservers to Cloudflare. This page shows what you need to do, but I\u0026rsquo;ve included a step-by-step just in case here. Head on over to Namecheap by going to:\nhttps://ap.www.namecheap.com/domains/domaincontrolpanel/\u0026lt;YOUR_DOMAIN_NAME_HERE\u0026gt;/domain and scroll down a bit to the Nameserver section for your domain\nChange your nameservers to point to Cloudflare\u0026rsquo;s nameservers\nreza.ns.cloudflare.com scott.ns.cloudflare.com And that\u0026rsquo;s it! Head back over to the Cloudflare informational page, and hit the Done, check nameservers button for Cloudflare to check and see if the changes have propagated out correctly In conclusion Hopefully this article goes into enough depth so others can see how they too can build a lazy, cheap, and robust solution without having to break the bank.\n"},"git_information":{"short_hash":"4a42e0e","commit_timestamp":"2023-01-14 05:18:13 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"4a42e0e80ba456a58265bf7f5db3b3be4a642777","subject":"Fixed mobile issues","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/4a42e0e80ba456a58265bf7f5db3b3be4a642777"}},{"metadata":{"title":"A Canadian Existential Crisis Introduction","slug":"a-canadian-existential-crisis-introduction","created_on":"2017-05-22 00:00:00 +0800 +0800","published_on":"2017-05-22 00:00:00 +0800 +0800","modified_on":"2021-11-30 02:55:57 -0500 -0500","categories":["updates"],"tags":["meta","personal site"],"thumbnail":"global/default-hamilton.png","thumbnail_alt_text":"If you're reading this you probably need a hobby- have you considered DnD?","permalink":"https://www.jasonyao.com/posts/2017/05/22/a-canadian-existential-crisis-introduction/","summary":"An introduction to the site with an explanation of the stack and why they were chosen","reading_time":"3-minute read"},"data":{"content":"Editor\u0026rsquo;s Note The platform description below described my previous setup between 2017 and 2021- check out the original 2017 guide for more in-depth details on this tech stack, or checkout the 4-year 2021 tech stack retro. Intro Hey there! My name is Jason, and for some reason you\u0026rsquo;ve stumbled onto my site. Whether it was to laugh at/with me on my rants, geeking out over playing games (currently Overwatch is my drug of choice), or because a technical guide sparked your interest, I hope you derive some enjoyment from this site.\nThis is actually the 5th or 6th time I\u0026rsquo;ve tried to get a blog going. I kept building and rebuilding prior versions on different platforms, and ended up learning five or six different ways to deploy blog platforms instead of just writing posts.\nPlatform Overview Technically speaking, I am proud that I managed to get everything to this point, because:\n1.) I get to be lazy\nThere is no maintenance required for the site, just content updates. Since hosting is taken care of by Github Pages, and deployment taken care of by Cloudflare\u0026rsquo;s CDN, all I have to do to update content is push to the github repo. In this fashion the site also becomes distributed among the CDN\u0026rsquo;s edge nodes, becoming fault-tolerant in the process (barring catastrophic failure), all while minimizing latency globally. 2.) I get free stuff until the heat death of the universe, or until they run out of business, whichever comes first\nFree automatic optimization of static assets and TLS provided by Cloudflare Free sending/receiving of emails from a custom email address via Mailgun * 3.) This site has an extremely strong foundation\nBy fully leveraging Jekyll\u0026rsquo;s liquid templating, this site can generate multiple output files from a single source Has proper 404 error code handling Has automatic redirects to the www. subdomain for better SEO Automatically leverages Opengraph for all pages, making any sharing on Facebook look good. Automatically adds metadata to all blog posts and projects via Schema.org markup Is mobile-friendly * Up to 10k emails a month, which is overkill for my purposes.\nExistential Crisis Question If you play Genji in Overwatch, are you supposed to spam \u0026ldquo;I NEED HEALING\u0026rdquo; when you get a kill, or emote over the enemy\u0026rsquo;s corpse?\nMy Answer I think I would uninstall the game and re-evaluate my life for picking trash heroes. At least it isn\u0026rsquo;t as bad as instalocking Hanzo.\nFuture Steps There\u0026rsquo;s a couple projects that I\u0026rsquo;ll be adding to the site over time, along with the writing of technical articles and other blog posts.\nBlog Posts \u0026amp; Technical Articles The first planned article will be on AWS and dev-ops in general The second planned article will be on a specific clever trick to build in a programmatic circuit breaker into AWS The third planned post will be something different, and be a rant about NYC\u0026rsquo;s terrible housing market for renters A fourth planned post fawning over the Hamilton Musical, since I only just saw it recently and was completely blown away and need to vent. "},"git_information":{"short_hash":"008df4d","commit_timestamp":"2021-11-30 02:55:57 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"008df4dab6b58959c47cd8643a357c6feec2c9f7","subject":"jyao/relaunch announcement (#36)","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/008df4dab6b58959c47cd8643a357c6feec2c9f7"}}],"count":"5"}