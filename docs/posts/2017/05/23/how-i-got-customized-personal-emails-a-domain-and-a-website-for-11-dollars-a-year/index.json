{"metadata":{"title":"How I got customized personal emails, a domain, and a website for 11 dollars a year","slug":"how-i-got-a-customized-online-presence-for-11-dollars-a-year","created_on":"2017-05-23 07:22:18 +0000 UTC","published_on":"2017-05-23 07:22:18 +0000 UTC","modified_on":"2021-11-30 02:55:57 -0500 -0500","categories":["guides"],"tags":["meta","personal site"],"thumbnail":"images/namecheap/namecheap-domain-2016-price.png","thumbnail_alt_text":"Having an online presence for the cost of 2 halal meals a year just makes me happy","permalink":"https://www.jasonyao.com/posts/2017/05/23/how-i-got-customized-personal-emails-a-domain-and-a-website-for-11-dollars-a-year/","summary":"The following post contains a bunch of specific details on how I managed to get free custom domain emails and a website on the internet with my only ongoing cost being the domain name.","reading_time":"7-minute read"},"data":{"content":"The following post contains a bunch of specific details on how I managed to get free custom domain emails and a website on the internet with my only ongoing cost being the domain name.\nOur goals Maintenance burden should be 0- if I do absolutely nothing to maintain this, everything should continue to Just Workâ„¢ Everything must be free, or as close to 0 as humanly possible Optimizations and extensions should be simple, easy, and intuitive Constraints I do want the ability to have the site versioned, so if I ever need to, I can revert back to an older version of a site easily I do want my content to be automatically optimized, so it can be shared correctly on Facebook and show up as a rich snippet on Google I do want solving for scale to be trivial, ideally in a way where it\u0026rsquo;s simple to add in the ability to deal with theoretical spikes in traffic I do want custom domain emails, so I can send and receive emails from foobar@JasonYao.com in Gmail without having to think about it As everybody knows, your solution to a problem is informed just as equally by what you\u0026rsquo;re not solving for, as much as it is the problem itself.\nI don\u0026rsquo;t need full CMS capabilities, or the ability to have dynamic backend functionality for my online presence (though if I do in the future I\u0026rsquo;d like for it to be easy to add in) I don\u0026rsquo;t need commerce or shopping capabilities I don\u0026rsquo;t want to have to muck about and style my site from the ground up- using and customizing a pre-built theme is a hard requirement, but CSS hurts my very smooth brain The chosen tech stack Service Company Cost Per Annum Custom domain Namecheap $10.86 USD Custom domain email Mailgun $0.00 USD Website hosting \u0026amp; Continuous Deployment (CD) Github Pages $0.00 USD Continuous Integration (CI) TravisCI $0.00 USD Static site generator Jekyll $0.00 USD Content Delivery Network (CDN) Cloudflare $0.00 USD Total cost per year: $10.86 USD\nCurrent Time Spent on Maintenance: 0 hours\nHere\u0026rsquo;s what the network request looks like from a user Your standard CDN-fronted, static site solution The thing to note here is that there\u0026rsquo;s nothing backing the webhost here- there\u0026rsquo;s no database or microservice backing it up, since the entire website is statically created at build time, and simply uses Github Pages to serve its content.\nTo actually update the content, the developer user flow looks like this (note that everything in this diagram is automated after pushing to Github): (Ab)using Github by using source control for full site deployments (and rollbacks if necessary) This setup comes with some nice benefits:\nThere\u0026rsquo;s no server or services that I need to manage Scaling horizontally is as simple as fronting the static content with 1 or more CDN or any other edge server Things are fast since everything is pre-computed, and the only bottleneck to painting content for users is literally just the network. Development cycle for new content is trivial, since it\u0026rsquo;s just \u0026ldquo;fire and forget\u0026rdquo; (or in this case \u0026ldquo;push and forget\u0026rdquo;). Setup guide Getting a domain This is as simple as just going to Namecheap, searching for a domain, and then hitting the buy button.\nNOTE: Since the domain cost is the only ongoing cost with this build, you may be tempted to take up namecheap\u0026rsquo;s great deal with paying $1.00 USD the first year for a .xyz TLD.\nDO NOT FALL FOR THIS.\nRemember kids, the first hit is free- or in this case 1 dollar, but it\u0026#39;s the follow-up where they get you. The annual renew rate for these cheap .xyz TLDs is actually around $13 USD, meaning that you\u0026rsquo;d be paying over a 40% premium for a more sketchy-looking domain name compared to a regular old .com or .net TLD.\nI\u0026rsquo;d suggest just getting a regular .com/.net, or one of the cheaper annual cost ccTLDs, depending on which country you\u0026rsquo;re from.\nGetting free custom email sending/receiving through Gmail This one takes a little bit of setup. Let\u0026rsquo;s dig in.\n2021 April 1st editor\u0026rsquo;s note: The process laid out here is no longer valid for new users due to changes to Mailgun\u0026rsquo;s pricing of their free tier. Consider other programmatic mail providers that have a free tier instead\nDanny Guo wrote up a great walkthough on this process back in 2018, but the gist is:\nUse any programmatic email provider with a free tier that enables the creation of SMTP users Enable email receiving by adding in an email route to forward emails to your personal Gmail account Enable email sending by creating an SMTP user foobar@yourdomain.com, and then give Gmail the username \u0026amp; password of your SMTP user so they can send emails that appear with an origin email of foobar@yourdomain.com Mailgun\u0026rsquo;s free tier in particular is really nice, since I get access to 10,000 emails a month for free- do note that this 10k number includes both sending and receiving!\nGenerally I\u0026rsquo;ll be in the ~200 emails sent \u0026amp; received every month, so I\u0026rsquo;m well within the established limits here.\nSetting up website hosting This is the meat of our new website that we\u0026rsquo;re making\nOur overarching steps here will be:\nCreate a new repo Setup our static site generator Setup our CI/CD pipeline Configure Github Pages to deploy our generated static website Creating a new repo This should be straight-forward, with the only caveat being that you\u0026rsquo;ll need to be particular about your repo naming convention, and make your name \u0026lt;USER_NAME_HERE\u0026gt;.github.io as the repo name Setting up our static site generator We use Jekyll here as our static site generator, and use a modified Jekyll theme as our starting off point for our website Setting up our CI/CD pipeline Our CI/CD pipeline is going to be a bit special. We\u0026rsquo;re going to:\nSet our mainline branch to be source, and branch off/merge in content into this branch Create a new branch off of source called publish, and use this branch as the branch where we have our generated site created in and kept in source code Create a travis.yml file that will \u0026ldquo;deploy\u0026rdquo; our code when it detects a push to the source branch, which will build the site and move all built files into the docs/ directory on the publish branch, before pushing everything up Configuring GitHub Pages to automatically deploy our site Let\u0026rsquo;s go ahead and in our created repo hit the Settings tab Once here, let\u0026rsquo;s enable GitHub Pages, and point it to our deployment branch that we\u0026rsquo;re committing to And we\u0026rsquo;re done! Now, any time anything new is committed to the publish branch in the docs directory, GitHub Pages will take those files and publish it onto the internet for us! Enabling horizontal scaling through CDNs We\u0026rsquo;re going to use Cloudflare as our chosen CDN because I love their ease-of-use and how consumer-friendly they are as a company.\nCreate a Cloudflare account if you don\u0026rsquo;t have one already, which should pop you into the dashboard over at https://dash.cloudflare.com Add in the name of your site that you want to have served by Cloudflare Select a billing plan for this domain- the free tier is perfectly fine for our needs, so we shouldn\u0026rsquo;t need any of the paid features here Cloudflare has some nice automatic DNS configuration backend work, which should take the heavy-lifting from copy/pasting DNS settings from Namecheap You should now be able to review and confirm your DNS settings- generally you wouldn\u0026rsquo;t need to change anything since those settings are the same as what you have currently Finally, we\u0026rsquo;ll need to confirm our control of the domain name by pointing its nameservers to Cloudflare. This page shows what you need to do, but I\u0026rsquo;ve included a step-by-step just in case here. Head on over to Namecheap by going to https://ap.www.namecheap.com/domains/domaincontrolpanel/\u0026lt;YOUR_DOMAIN_NAME_HERE\u0026gt;/domain, and scroll down a bit to the Nameserver section for your domain Change your nameservers to point to Cloudflare\u0026rsquo;s nameservers reza.ns.cloudflare.com scott.ns.cloudflare.com And that\u0026rsquo;s it! Head back over to the Cloudflare informational page, and hit the Done, check nameservers button for Cloudflare to check and see if the changes have propagated out correctly In conclusion Hopefully this article goes into enough depth so others can see how they too can build a lazy, cheap, and robust solution without having to break the bank.\n"},"git_information":{"short_hash":"008df4d","commit_timestamp":"2021-11-30 02:55:57 -0500 -0500","author":"Jason Yao <Hello@JasonYao.com>","full_hash":"008df4dab6b58959c47cd8643a357c6feec2c9f7","subject":"jyao/relaunch announcement (#36)","commit_link":"https://github.com/JasonYao/JasonYao.github.io/commit/008df4dab6b58959c47cd8643a357c6feec2c9f7"}}